trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'SeuAzureSubscription' # Nome do serviço de conexão com o Azure
  containerRegistry: 'SeuContainerRegistry.azurecr.io' # Nome do Azure Container Registry
  containerRepository: 'dioapi' # Nome do repositório no ACR
  imageTag: '$(Build.BuildId)' # Tag da imagem (usando o ID do build)
  appServiceName: 'NomeDoSeuAppService' # Nome do App Service no Azure para contêineres

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restaurar dependências'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Compilar solução'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Executar testes'
  inputs:
    command: 'test'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: Docker@2
  displayName: 'Construir imagem Docker'
  inputs:
    command: 'build'
    repository: '$(containerRegistry)/$(containerRepository)'
    dockerfile: 'Dockerfile' # Certifique-se de que o arquivo Dockerfile está no root do projeto ou ajuste o caminho
    tags: '$(imageTag)'

- task: Docker@2
  displayName: 'Fazer push da imagem para o ACR'
  inputs:
    command: 'push'
    repository: '$(containerRegistry)/$(containerRepository)'
    tags: '$(imageTag)'

- task: AzureWebAppContainer@1
  displayName: 'Deploy no Azure App Service para Contêineres'
  inputs:
    azureSubscription: $(azureSubscription)
    appName: $(appServiceName)
    containers: |
      $(containerRegistry)/$(containerRepository):$(imageTag)
